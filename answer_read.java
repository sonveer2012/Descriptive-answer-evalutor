
import java.io.BufferedReader;
import java.io.FileReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Dell
 */
public class answer_read extends javax.swing.JFrame {

    /**
     * Creates new form answer_read
     */
    public answer_read() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        l1 = new javax.swing.JLabel();
        l3 = new javax.swing.JLabel();
        t1 = new javax.swing.JTextField();
        t2 = new javax.swing.JTextField();
        read_answer = new javax.swing.JButton();
        l2 = new javax.swing.JLabel();
        l4 = new javax.swing.JLabel();
        t3 = new javax.swing.JTextField();
        autocorrect = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        l1.setText("PATH ");

        l3.setText("MODEL ANSWER PAPER");

        read_answer.setText("EVALUATE ANSWER PAPER");
        read_answer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                read_answerActionPerformed(evt);
            }
        });

        l4.setText("DOCUMENT NAME");

        autocorrect.setText("READ ANSWER PAPER ");
        autocorrect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autocorrectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(l2, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(l1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(102, 102, 102)
                                .addComponent(t1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(l4)
                                    .addComponent(l3)
                                    .addComponent(autocorrect))
                                .addGap(81, 81, 81)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(read_answer)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(t2)
                                    .addComponent(t3))))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(l1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(l4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(l3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(t2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(t3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(read_answer)
                    .addComponent(autocorrect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(l2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    
    public static int dictionary_check(String str){
      String strf = new String();
      
      String filename="C:\\Users\\Dell\\Desktop\\dictionary\\dictionary_words"+str.substring(0,1).toUpperCase()+".txt";
      int flag=0;
        try{
        FileReader fr = new FileReader(filename);
            BufferedReader bb = new BufferedReader(fr);
             while((strf = bb.readLine()) != null)
            {
               // i = strf.indexOf(":");
                //sub = strf.substring(0,i);
                
                
                if(str.compareTo(strf)<0)
                    break;
                        
                if(str.equals(strf))
                {
                    System.out.println(strf);
                    flag=1;
                }
        
            }
            
            bb.close();

           /* if(flag==0){
             
               
                System.out.println("Word not found");
            }
                   */
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
        return flag;

}
    
    public static void add_letters(String str){
        
        int i,j,len;
        String str1="", str2="", str3;
        char ch='a';
        len=str.length();
        
        for(j=1;j<=26;j++){
            
        
        str3=ch+str;
        dictionary_check(str3);
   
       // System.out.println(str3);
        for(i=1;i<=len;i++){
          str1=str.substring(0,i);
          str2=str.substring(i,len);
          str3=str1+ch+str2;
          dictionary_check(str3);
          /*if(dictionary_check(str3)!=1){
                add_letters(str);
      remove_letters(str);
        switch_adj(str);
        substitute_letter(str);
          }*/
              
          //str2=str.substring()
         // System.out.println(str3);
        }
        ch++;
      }
    }
    
    public static void remove_letters(String str){
        
        int i,j,len;
        String str1="", str2="", str3;
        char ch='a';
        len=str.length();
         str3=str.substring(1,len);
        dictionary_check(str3);
        //System.out.println(str3);
         /* if(dictionary_check(str3)!=1){
                add_letters(str);
      remove_letters(str);
        switch_adj(str);
        substitute_letter(str);
          }
         */
        for(i=1;i<len;i++){
        str1=str.substring(0,i);
          str2=str.substring(i+1,len);
            str3=str1+str2;
           // dictionary_check(str3);
            //System.out.println(str3);
             /* if(dictionary_check(str3)!=1){
                add_letters(str);
      remove_letters(str);
        switch_adj(str);
        substitute_letter(str);
            */
          
        }  
    }
    
    public static void switch_adj(String str){
        int i,j,len;
        String str1="", str2="", str3;
        char ch1,ch2;
        len=str.length();
        for(i=0;i<len-1;i++){
            str1=str.substring(0,i);
            ch1= str.charAt(i);
            ch2=str.charAt(i+1);
            str2=str.substring(i+2);
            str3=str1+ch2+ch1+str2;
            //dictionary_check(str3);
           // System.out.println(str3);
              /*if(dictionary_check(str3)!=1){
                add_letters(str);
      remove_letters(str);
        switch_adj(str);
        substitute_letter(str);
            
          }*/
        } 
        
    }
    public static void substitute_letter(String str){
         int i,j,len;
        String str1="", str2="", str3;
        char ch;
        len=str.length();
        for(j=0;j<len;j++){
                str1=str.substring(0,j);
                str2=str.substring(j+1);
                ch='a';
                for(i=1;i<=26;i++){
                str3=str1+ch+str2;
               dictionary_check(str3);
              //  System.out.println(str3);
                 /* if(dictionary_check(str3)!=1){
                add_letters(str);
      remove_letters(str);
        switch_adj(str);
        substitute_letter(str);
          }
                 */
                ch++;
                  }
            }
    }
    

    
    
    
    
    
    
    
    
    
    
  
 
    
    
    
    
    
     static  String stop_words[]={"a","about","above","after","again",
"against","all","am","an","and","any","are","aren't","as","at","be","because","been","before","being","below","between","both","but","by","can't","cannot","could","couldn't",
"did","didn't","do","does","doesn't","doing","don't","down","during","each","few","for","from","further","had","hadn't","has","hasn't","have","haven't","having","he","he'd","he'll","he's","her","here",
"here's","hers","herself","him","himself","his","how","how's","i","i'd","i'll","i'm","i've","if","in","into","is","isn't","it","it's","its","itself","let's","me","more","most","mustn't","my","myself","no","nor","not","of",
"off","on","once","only","or","other","ought","our","ours", "ourselves","out","over","own","same","shan't","she","she'd","she'll","she's","should","shouldn't","so","some","such","than","that","that's","the","their","theirs",
"them","themselves","then","there","there's","these","they","they'd","they'll","they're","they've","this","those","through","to","too","under","until","up","very","was","wasn't","we","we'd","we'll","we're","we've","were",
"weren't","what","what's","when","when's","where","where's","which","while","who","who's","whom","why","why's","with","won't","would","wouldn't","you","you'd","you'll","you're","you've","your","yours","yourself","yourselves"};
 
   int arr_len=174;
   
   
    public static int search_stop_words(String word){
        
        int i=0,j=173,mid;
        mid=(i+j)/2;
        String str1="",str2="";
        str2=word.toUpperCase();
        while(i<=j){
            str1=stop_words[mid].toUpperCase();
            if(str1.equals(str2))
                return 1;
            else
                if(str1.compareTo(str2)>0)
                    j=mid-1;
             else
                    i=mid+1;
            mid=(i+j)/2;
            }
       // if(str1.equals(str2))
         //       return 1;
        
        return 0;
    }
    
    public static int search_mysql(String word, int q_no,String table_name){
     try{
       Class.forName("com.mysql.jdbc.Driver").newInstance();
            Connection con=DriverManager.getConnection("jdbc:mysql://localhost/descriptive_answer","root","shanu");
            Statement stmt=con.createStatement();
              Statement stmt1=con.createStatement();
             String query1="select word_replacement from word_list where word='"+word+"';";
             ResultSet rs1=stmt1.executeQuery(query1);
            
             while(rs1.next()){
                 word=rs1.getString("word_replacement");
             }
             rs1.close();
            
            String query= "Select * from "+table_name+" where ques_no="+q_no+" and key_words='"+word+"'and match_key=0; ";
            System.out.println(query);
            ResultSet rs=stmt.executeQuery(query);
            while(rs.next()){
                query="Update "+table_name+" set match_key=1 where ques_no="+q_no+" and key_words='"+word+"';";
                System.out.println(query);
                stmt.executeUpdate(query);
                System.out.println(word);
                return 1;
            }
             con.close();
           stmt.close();
           rs.close();
            
             
     }
     catch(Exception e){
         System.out.println(e+"");
     }
     
     
  return 0; 
 } 
    
    public static void read_answer_paper(String file_name, String model_name){
    int i,ctr,j,len,len1,k, match=0;
    String str="", str1="",str2="",type_paper="answer";
     try{
     FileReader fi= new FileReader(file_name);
     BufferedReader br =new BufferedReader(fi);
    
           
      while((str=br.readLine())!=null){
         System.out.println("shanu");
         i=0;
         ctr=Integer.parseInt(str.substring(0,str.indexOf('.')));
         str=str.substring(str.indexOf('.')+1);
         len=str.length();
         
         while(len!=0){
             
             
         j= str.indexOf('.');
         str1=str.substring(i,j);
         
         
         len1=str1.length();
         while(len1!=0){
         k=str1.indexOf(' ');
         if(k<0){
              if(dictionary_check(str1)==1){
            System.out.println(str1);
            
            
                 }
        else{
                    
        add_letters(str1);
      remove_letters(str1);
        switch_adj(str1);
        substitute_letter(str1);
        }   
              if(search_stop_words(str1)==0)
                  match+=search_mysql(str1,ctr,model_name);
              
              break;
         }
   
         str2=str1.substring(0,k);
        str2= str2.trim();
        
        System.out.println("yaha tak");
                 if(dictionary_check(str2)==1){
            System.out.println(str2);
            
            
                 }
        else{
                    
        add_letters(str2);
      remove_letters(str2);
        switch_adj(str2);
        substitute_letter(str2);
        }   
        
         str1=str1.substring(k+1);
       
         len1=str1.length();
        if(search_stop_words(str2)==0){
            System.out.println(str2);
            match+=search_mysql(str2,ctr,model_name);
            
        }
     }
         str=str.substring(j+1);
         System.out.println(str1);
          len=str.length();
         }
      }
   
     
 } 
     catch(Exception e){
         
     }
     
     
     
     System.out.println(""+match);
     }  
    
     public static int cal_marks(String table_name){
     int full_marks=10,tot=0,corr=0,marks=0;
      try{
       Class.forName("com.mysql.jdbc.Driver").newInstance();
            Connection con=DriverManager.getConnection("jdbc:mysql://localhost/descriptive_answer","root","shanu");
            Statement stmt=con.createStatement();
            String query="select count(key_words),sum(match_key)from "+table_name+" group by ques_no;";
           ResultSet rs= stmt.executeQuery(query);
           
           while(rs.next()){
               corr=rs.getInt("sum(match_key)");
               tot=rs.getInt("count(key_words)");
               marks+=(corr*full_marks)/tot;
            }
            
           con.close();
           stmt.close();
           rs.close();
           
            return marks;
         }
         catch(Exception e){
             return 0;
         }
     }
     
     
     
     public static void set_default(String table_name){
         try{
       Class.forName("com.mysql.jdbc.Driver").newInstance();
            Connection con=DriverManager.getConnection("jdbc:mysql://localhost/descriptive_answer","root","shanu");
            Statement stmt=con.createStatement();
            String query="update "+table_name+" set match_key=0;";
            stmt.executeUpdate(query);
             con.close();
           stmt.close();
           
         }
         catch(Exception e){
             
         }
 }
 
    private void read_answerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_read_answerActionPerformed
        String path=t1.getText();
        String doc_name=t2.getText();
        String model_name=t3.getText();
        model_name=model_name.substring(0,model_name.indexOf('.'));
        System.out.println(path);
        String path_name=path+"/"+doc_name;
        path_name.replaceAll("/", "//");
        System.out.println(doc_name);
        read_answer_paper(path_name,model_name);
l2.setText(cal_marks(model_name)+"");
  set_default(model_name);
  
       // l2.setText("Model Answer paper fed successfully!!");// TODO add your handling code here:
    }//GEN-LAST:event_read_answerActionPerformed

    private void autocorrectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autocorrectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_autocorrectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(answer_read.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(answer_read.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(answer_read.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(answer_read.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new answer_read().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton autocorrect;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel l1;
    private javax.swing.JLabel l2;
    private javax.swing.JLabel l3;
    private javax.swing.JLabel l4;
    private javax.swing.JButton read_answer;
    private javax.swing.JTextField t1;
    private javax.swing.JTextField t2;
    private javax.swing.JTextField t3;
    // End of variables declaration//GEN-END:variables
}
